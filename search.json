[{"title":"Canal同步mysql数据至rocketMq","path":"/2023/11/18/Canal同步mysql数据至rocketMq/","content":"Canal概述在业务系统中，我们常常需要关注mysql表中某些数据的变化，当数据发生变化时，实时同步到es中，或者触发某些特定流程，因此需要一个工具提供MySQL数据变更的订阅与消费能力我们知道MySQL的binlog可以用于主从同步，在MySQL集群中，slave会向master发送同步请求，master收到请求后会返回binlog对象，slave收到响应后将binlog写入到自己中继日志relay log中，然后再重放relay log中的数据，变更自身的数据阿里的Canal会伪装成MySQL Slave向Master节点发送同步请求，并解析从Master收到的binlog对象 Pasted image 20231119151144.png 实践 环境：腾讯云centos7; Docker version 18.06.3-ce; 1、安装并配置Mysql在docker中拉取mysql镜像 1[root@VM-4-2-centos mysql]# docker pull mysql 拉取成功 123[root@VM-4-2-centos mysql]# docker imagesREPOSITORY TAG IMAGE ID CREATED SIZEmysql latest a3b6608898d6 3 weeks ago 596MB 在本地新建几个目录， 分别存放数据、配置和日志，用于挂载到docker容器中 123[root@VM-4-2-centos /]# mkdir usr/local/mysql/data[root@VM-4-2-centos /]# mkdir usr/local/mysql/conf[root@VM-4-2-centos /]# mkdir usr/local/mysql/log 创建配置文件开启binlog 1vim usr/local/mysql/conf/my.conf 12345678[mysqld]## 设置binlog存储目录log-bin=/var/lib.mysql/mysql-binserver-id=1binlog_format=ROW## 设置binlog过期时间，默认为0永久expire_logs_days=30[root@VM-4-2-centos /]# 启动mysql容器并挂载目录 123456789[root@VM-4-2-centos /]# \\&gt; docker run -d \\&gt; -p 3306:3306 \\&gt; --name mysql8 \\&gt; -v /usr/local/mysql/data:/var/lib/mysql \\&gt; -v /usr/local/mysql/conf:/etc/mysql/conf.d \\&gt; -v /usr/local/mysql/log:/var/log/mysql \\&gt; -e MYSQL_ROOT_PASSWORD=LZ1234 \\&gt; mysql 参数解释 12345-d ##后台运行-p [宿主端口]:[容器端口] ##端口映射-v [宿主目录]:[容器目录] ##挂载目录--name ##为容器指定一个名字-e ##设置环境变量 查看docker当前运行的容器，可以看到mysql8已经在运行中了 123[root@VM-4-2-centos /]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMES22ef1762e562 mysql &quot;docker-entrypoint.s…&quot; 5 minutes ago Up 5 minutes 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp mysql8 进入到mysql容器 12[root@VM-4-2-centos data]# docker exec -it mysql8 /bin/bashbash-4.4# mysql -u root -p 可以看到binlog已经开启了 123456mysql&gt; show variables like &#x27;log_bin&#x27;;+---------------+-------+| Variable_name | Value |+---------------+-------+| log_bin | ON |+---------------+-------+ 为Canal创建一个mysql账户并分配权限 12345678mysql&gt; CREATE USER canal IDENTIFIED BY &#x27;canal&#x27;;Query OK, 0 rows affected (0.01 sec)mysql&gt; GRANT SELECT, SHOW VIEW, REPLICATION SLAVE, REPLICATION CLIENT ON *.* TO &#x27;canal&#x27;@&#x27;%&#x27;;Query OK, 0 rows affected (0.01 sec)mysql&gt; FLUSH PRIVILEGES;Query OK, 0 rows affected (0.00 sec) 创建一张表用于测试 1234567891011mysql&gt; CREATE DATABASE `test`;Query OK, 1 row affected (0.02 sec)mysql&gt; USE `test`;Database changedmysql&gt; CREATE TABLE `user` ( -&gt; `id` BIGINT(20) UNSIGNED NOT NULL AUTO_INCREMENT COMMENT &#x27;user id&#x27;, -&gt; `user_name` VARCHAR(256) NOT NULL COMMENT &#x27;user name&#x27;, -&gt; `password` VARCHAR(256) NOT NULL COMMENT &#x27;password&#x27;, -&gt; PRIMARY KEY(`id`) -&gt; ) ENGINE=InnoDB AUTO_INCREMENT=1 CHARSET=utf8mb4;Query OK, 0 rows affected, 1 warning (0.03 sec) 2、安装并配置rocketMq（单机）拉取rocketMq镜像 1[root@VM-4-2-centos conf]# docker pull rocketmqinc/rocketmq 创建namesrv的文件夹用以挂载 12[root@VM-4-2-centos local]# mkdir /usr/local/rocketmq/namesrv/logs[root@VM-4-2-centos local]# mkdir /usr/local/rocketmq/namesrv/store 启动namesrv 12345678[root@VM-4-2-centos local]# \\&gt; docker run -d \\&gt; -p 9876:9876 \\&gt; -v /usr/local/rocketmq/namesrv/logs:/root/logs \\&gt; -v /usr/local/rocketmq/namesrv/store:/root/store \\&gt; --name rmqNamesrv \\&gt; rocketmqinc/rocketmq \\&gt; sh mqnamesrv 查看运行中的容器可以看到容器已启动 1234[root@VM-4-2-centos local]# docker psCONTAINER ID IMAGE COMMAND CREATED STATUS PORTS NAMESfdb2d77cb29f rocketmqinc/rocketmq &quot;sh mqnamesrv&quot; 9 seconds ago Up 8 seconds 10909/tcp, 0.0.0.0:9876-&gt;9876/tcp, 10911/tcp rmqNamesrv71f35f013ae1 mysql &quot;docker-entrypoint.s…&quot; 35 minutes ago Up 35 minutes 0.0.0.0:3306-&gt;3306/tcp, 33060/tcp mysql8 查看namesrv日志可以看到启动成功了 123[root@VM-4-2-centos local]# cat /usr/local/rocketmq/namesrv/logs/rocketmqlogs/namesrv.log... ...2023-11-19 11:16:18 INFO main - The Name Server boot success. serializeType=JSON 创建broker的文件夹及配置文件用以挂载到容器 1234[root@VM-4-2-centos local]# mkdir /usr/local/rocketmq/broker/logs[root@VM-4-2-centos local]# mkdir /usr/local/rocketmq/broker/store[root@VM-4-2-centos local]# mkdir /usr/local/rocketmq/broker/conf[root@VM-4-2-centos local]# vim /usr/local/rocketmq/broker/conf/broker.conf 12345678910111213141516171819# 所属集群名称，如果节点较多可以配置多个brokerClusterName = DefaultCluster#broker名称，master和slave使用相同的名称，表明他们的主从关系brokerName = broker-a#0表示Master，大于0表示不同的slavebrokerId = 0#表示几点做消息删除动作，默认是凌晨4点deleteWhen = 04#在磁盘上保留消息的时长，单位是小时fileReservedTime = 48#有三个值：SYNC_MASTER，ASYNC_MASTER，SLAVE；同步和异步表示Master和Slave之间同步数据的机制；brokerRole = ASYNC_MASTER#刷盘策略，取值为：ASYNC_FLUSH，SYNC_FLUSH表示同步刷盘和异步刷盘；SYNC_FLUSH消息写入磁盘后才返回成功状态，ASYNC_FLUSH不需要；flushDiskType = ASYNC_FLUSH# 设置namesrv地址namesrvAddr=***.***.***.***:9876# 设置宿主机ip地址brokerIP1=***.***.***.*** 启动broker容器 1234567891011[root@VM-4-2-centos local]# \\&gt; docker run -d \\&gt; -p 10911:10911 -p 10909:10909 \\&gt; -v /usr/local/rocketmq/broker/logs:/root/logs \\&gt; -v /usr/local/rocketmq/broker/store:/root/store \\&gt; -v /usr/local/rocketmq/broker/conf/broker.conf:/opt/rocketmq/conf/broker.conf \\&gt; --name rmqBroker \\&gt; --link rmqNamesrv:namesrv \\&gt; -e &quot;NAMESRV_ADDR=namesrv:9876&quot; \\&gt; rocketmqinc/rocketmq \\&gt; sh mqbroker -c /opt/rocketmq/conf/broker.conf 安装并启动rocketmq-console 12345678[root@VM-4-2-centos rocketmq]# docker pull styletang/rocketmq-console-ng[root@VM-4-2-centos rocketmq]# \\&gt; docker run -d \\&gt; --restart=always \\&gt; --name rocketmqConsole \\&gt; -e &quot;JAVA_OPTS=-Drocketmq.namesrv.addr=***.***.***.***:9876 -Drocketmq.config.isVIPChannel=false&quot; \\&gt; -p 9090:8080 \\&gt; styletang/rocketmq-console-ng 3、配置并启动Canal下载Cancal并解压 123[root@VM-4-2-centos canal]# wget https://github.com/alibaba/canal/releases/download/canal-1.1.7/canal.deployer-1.1.7.tar.gz[root@VM-4-2-centos canal]# mkdir canal-deployer[root@VM-4-2-centos canal]# tar -zxvf canal.example-1.1.7.tar.gz -C ./canal-deployer 更改.&#x2F;canal-deployer&#x2F;conf&#x2F;canal.properties配置，将serverMode改为rocketMq 12# tcp, kafka, rocketMQ, rabbitMQ, pulsarMQcanal.serverMode = rocketMQ 更改.&#x2F;canal-deployer&#x2F;conf&#x2F;example&#x2F;instance.properties配置，其中canal.instance.mysql.slaveId不能与mysql的id相同，1.0.26版本后会自动生成，可不配置 123456789# mysql地址canal.instance.master.address=127.0.0.1:3306# mysql用户canal.instance.dbUsername=canalcanal.instance.dbPassword=canal# 需要监听的库表，默认为所有canal.instance.filter.regex=.*\\\\..*# 打开动态topic，且每个表都会发送到表名的topic中canal.mq.dynamicTopic=.*\\\\..* 启动canal 1[root@VM-4-2-centos bin]# sh /usr/local/canal/canal-deployer/bin/startup.sh 这时候我们在到rocketMq后台可以看到已经有名为test_user的topic Pasted image 20231119143132.png 我们在test.user中插入一条数据 1234567891011mysql&gt; INSERT INTO `user` (`user_name`, `password`) -&gt; VALUES (&#x27;zhangsan&#x27;, &#x27;zhangsan1234&#x27;);Query OK, 1 row affected (0.01 sec)mysql&gt; SELECT * FROM `user`;+----+-----------+--------------+| id | user_name | password |+----+-----------+--------------+| 1 | zhangsan | zhangsan1234 |+----+-----------+--------------+1 row in set (0.00 sec) mq也收到了该消息 Pasted image 20231119143603.png 再尝试更新一下 123mysql&gt; UPDATE `user` SET `password` = &#x27;zhangsan2345&#x27; WHERE `id` = 1;Query OK, 1 row affected (0.01 sec)Rows matched: 1 Changed: 1 Warnings: 0 Pasted image 20231119143808.png","tags":["Java","Canal","MySQL","Binlog","RocketMQ"]},{"title":"Hello World","path":"/2023/08/20/hello-world/","content":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment"}]